
NUCLEO_L476_TIMERCOUNTER_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004640  08004640  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004648  08004648  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000084  080046d4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080046d4  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ee2  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002074  00000000  00000000  00032f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027662  00000000  00000000  00036cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116fc  00000000  00000000  0005e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c98  00000000  00000000  0006fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001646ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000420c  00000000  00000000  00164744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800459c 	.word	0x0800459c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800459c 	.word	0x0800459c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb0b 	bl	8000b86 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f84c 	bl	800060c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f92e 	bl	80007d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000578:	f000 f8aa 	bl	80006d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8fa 	bl	8000774 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2); // Don't forget this! Start the timer!
 8000580:	4810      	ldr	r0, [pc, #64]	; (80005c4 <main+0x5c>)
 8000582:	f002 fa35 	bl	80029f0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    counter_val = (int) (TIM2 -> CNT);
 8000586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058c:	461a      	mov	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0x60>)
 8000590:	601a      	str	r2, [r3, #0]

	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <main+0x64>)
 8000598:	f000 fe4a 	bl	8001230 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f1      	bne.n	8000586 <main+0x1e>
		sprintf(MSG, "Ticks = %d\n\r", counter_val);
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <main+0x60>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4909      	ldr	r1, [pc, #36]	; (80005d0 <main+0x68>)
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x6c>)
 80005ac:	f003 fbc8 	bl	8003d40 <siprintf>
		HAL_UART_Transmit(&huart2, (const uint8_t *) MSG, (uint16_t)sizeof(MSG), 100);
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	2214      	movs	r2, #20
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <main+0x6c>)
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x70>)
 80005b8:	f002 fec2 	bl	8003340 <HAL_UART_Transmit>
		HAL_Delay(10);
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fb57 	bl	8000c70 <HAL_Delay>
    counter_val = (int) (TIM2 -> CNT);
 80005c2:	e7e0      	b.n	8000586 <main+0x1e>
 80005c4:	200000c4 	.word	0x200000c4
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	48000800 	.word	0x48000800
 80005d0:	080045b4 	.word	0x080045b4
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	20000110 	.word	0x20000110

080005dc <HAL_TIM_PeriodElapsedCallback>:
	}
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (const uint8_t *) OVERFLOW_MSG, (uint16_t)sizeof(OVERFLOW_MSG), 100);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2214      	movs	r2, #20
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005ea:	4807      	ldr	r0, [pc, #28]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005ec:	f002 fea8 	bl	8003340 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f0:	2120      	movs	r1, #32
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 fe4b 	bl	8001290 <HAL_GPIO_TogglePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20000110 	.word	0x20000110

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fb88 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f000 fe65 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f92e 	bl	800089c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f000 fe40 	bl	80012c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xc0>)
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xc0>)
 800064c:	f023 0318 	bic.w	r3, r3, #24
 8000650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000654:	2314      	movs	r3, #20
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000674:	2324      	movs	r3, #36	; 0x24
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fe8f 	bl	80013ac <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000694:	f000 f902 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2104      	movs	r1, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fa55 	bl	8001b60 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c0:	f001 ff5c 	bl	800257c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c4:	bf00      	nop
 80006c6:	3758      	adds	r7, #88	; 0x58
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_TIM2_Init+0xa0>)
 80006f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_TIM2_Init+0xa0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_TIM2_Init+0xa0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_TIM2_Init+0xa0>)
 8000704:	220a      	movs	r2, #10
 8000706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_TIM2_Init+0xa0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_TIM2_Init+0xa0>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000714:	4816      	ldr	r0, [pc, #88]	; (8000770 <MX_TIM2_Init+0xa0>)
 8000716:	f002 f913 	bl	8002940 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000720:	f000 f8bc 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 8000732:	230f      	movs	r3, #15
 8000734:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_TIM2_Init+0xa0>)
 800073e:	f002 fae6 	bl	8002d0e <HAL_TIM_ConfigClockSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f8a8 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_TIM2_Init+0xa0>)
 800075a:	f002 fcfd 	bl	8003158 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 f89a 	bl	800089c <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000c4 	.word	0x200000c4

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	f002 fd74 	bl	80032a4 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f86b 	bl	800089c <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000110 	.word	0x20000110
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <MX_GPIO_Init+0xc0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a29      	ldr	r2, [pc, #164]	; (8000894 <MX_GPIO_Init+0xc0>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_GPIO_Init+0xc0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_GPIO_Init+0xc0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_GPIO_Init+0xc0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_GPIO_Init+0xc0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fd1d 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0xc4>)
 800082e:	f000 fd17 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000832:	2320      	movs	r3, #32
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f000 fb46 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xc4>)
 800086a:	f000 fb37 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xc4>)
 8000888:	f000 fb28 	bl	8000edc <HAL_GPIO_Init>
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d131      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a14      	ldr	r2, [pc, #80]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_TIM_Base_MspInit+0x90>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000954:	2302      	movs	r3, #2
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f000 fabb 	bl	8000edc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	201c      	movs	r0, #28
 800096c:	f000 fa7f 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000970:	201c      	movs	r0, #28
 8000972:	f000 fa98 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0ac      	sub	sp, #176	; 0xb0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2288      	movs	r2, #136	; 0x88
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 f9c3 	bl	8003d30 <memset>
  if(huart->Instance==USART2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_UART_MspInit+0xb0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d13b      	bne.n	8000a2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 faf1 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009cc:	f7ff ff66 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	6593      	str	r3, [r2, #88]	; 0x58
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0xb4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a00:	230c      	movs	r3, #12
 8000a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fa58 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	37b0      	adds	r7, #176	; 0xb0
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8d2 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM2_IRQHandler+0x10>)
 8000a96:	f002 f81b 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000c4 	.word	0x200000c4

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f003 f902 	bl	8003cdc <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20018000 	.word	0x20018000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000b8 	.word	0x200000b8
 8000b0c:	200001a8 	.word	0x200001a8

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 f8c1 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fcff 	bl	8000568 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b78:	08004650 	.word	0x08004650
  ldr r2, =_sbss
 8000b7c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b80:	200001a8 	.word	0x200001a8

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>

08000b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f961 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe7e 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d023      	beq.n	8000c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_InitTick+0x70>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f96d 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10f      	bne.n	8000c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d809      	bhi.n	8000c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f937 	bl	8000e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0x74>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e001      	b.n	8000c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	20000014 	.word	0x20000014
 8000c2c:	20000018 	.word	0x20000018

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000001c 	.word	0x2000001c
 8000c54:	20000194 	.word	0x20000194

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000194 	.word	0x20000194

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000001c 	.word	0x2000001c

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff29 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff3e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff31 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e17f      	b.n	80011ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8171 	beq.w	80011e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d118      	bne.n	8000fbc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d017      	beq.n	8000ff8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80ac 	beq.w	80011e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_GPIO_Init+0x330>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a5e      	ldr	r2, [pc, #376]	; (800120c <HAL_GPIO_Init+0x330>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <HAL_GPIO_Init+0x330>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a6:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x334>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x242>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x338>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x23e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x33c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x23a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x340>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x236>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x344>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x232>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_GPIO_Init+0x348>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x22e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4a      	ldr	r2, [pc, #296]	; (8001228 <HAL_GPIO_Init+0x34c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x22a>
 8001102:	2306      	movs	r3, #6
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001106:	2307      	movs	r3, #7
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800111e:	2300      	movs	r3, #0
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001130:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x350>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x350>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_GPIO_Init+0x350>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_GPIO_Init+0x350>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x350>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x350>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_Init+0x350>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x350>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f ae78 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	48000c00 	.word	0x48000c00
 8001220:	48001000 	.word	0x48001000
 8001224:	48001400 	.word	0x48001400
 8001228:	48001800 	.word	0x48001800
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800127c:	e002      	b.n	8001284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43d9      	mvns	r1, r3
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	400b      	ands	r3, r1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	; 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000014 	.word	0x20000014
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3c6      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4ba1      	ldr	r3, [pc, #644]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80e4 	beq.w	80015a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	f040 808b 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8087 	bne.w	8001504 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	4b93      	ldr	r3, [pc, #588]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e39e      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_RCC_OscConfig+0x7c>
 800141e:	4b89      	ldr	r3, [pc, #548]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x88>
 8001428:	4b86      	ldr	r3, [pc, #536]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001434:	4293      	cmp	r3, r2
 8001436:	d223      	bcs.n	8001480 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd53 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e37f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b7d      	ldr	r3, [pc, #500]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a7c      	ldr	r2, [pc, #496]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4977      	ldr	r1, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	4972      	ldr	r1, [pc, #456]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	496a      	ldr	r1, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	4965      	ldr	r1, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd13 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e33f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014cc:	f000 fc48 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	495a      	ldr	r1, [pc, #360]	; (8001648 <HAL_RCC_OscConfig+0x29c>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x2a0>)
 80014ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x2a4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb61 	bl	8000bb8 <HAL_InitTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d052      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	e323      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d032      	beq.n	8001572 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb9e 	bl	8000c58 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fb9a 	bl	8000c58 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e30c      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a40      	ldr	r2, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	493b      	ldr	r1, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4936      	ldr	r1, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e01a      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb6b 	bl	8000c58 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001586:	f7ff fb67 	bl	8000c58 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e2d9      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1da>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d074      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10e      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d064      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d160      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2b6      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x24a>
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e01d      	b.n	8001632 <HAL_RCC_OscConfig+0x286>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x26e>
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x286>
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800162c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01c      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fb0d 	bl	8000c58 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001640:	e011      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	080045c4 	.word	0x080045c4
 800164c:	20000014 	.word	0x20000014
 8001650:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb00 	bl	8000c58 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e272      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4baf      	ldr	r3, [pc, #700]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff faf0 	bl	8000c58 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff faec 	bl	8000c58 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e25e      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4ba5      	ldr	r3, [pc, #660]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b99      	ldr	r3, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e23b      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b93      	ldr	r3, [pc, #588]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4990      	ldr	r1, [pc, #576]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8b      	ldr	r2, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff faab 	bl	8000c58 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff faa7 	bl	8000c58 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e219      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b82      	ldr	r3, [pc, #520]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	497c      	ldr	r1, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa87 	bl	8000c58 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fa83 	bl	8000c58 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1f5      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b70      	ldr	r3, [pc, #448]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fa62 	bl	8000c58 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fa5e 	bl	8000c58 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1d0      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa45 	bl	8000c58 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa41 	bl	8000c58 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b3      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	4a43      	ldr	r2, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	; 0x58
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff fa08 	bl	8000c58 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fa04 	bl	8000c58 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e176      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001882:	e024      	b.n	80018ce <HAL_RCC_OscConfig+0x522>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d110      	bne.n	80018ae <HAL_RCC_OscConfig+0x502>
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	e00f      	b.n	80018ce <HAL_RCC_OscConfig+0x522>
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9bf 	bl	8000c58 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f9bb 	bl	8000c58 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e12b      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ed      	beq.n	80018de <HAL_RCC_OscConfig+0x532>
 8001902:	e01a      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f9a8 	bl	8000c58 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f9a4 	bl	8000c58 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d906      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e114      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e8      	bne.n	800190c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a83      	ldr	r2, [pc, #524]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80fa 	beq.w	8001b4a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 80d0 	bne.w	8001b00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001960:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d130      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d127      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a0:	2a07      	cmp	r2, #7
 80019a2:	bf14      	ite	ne
 80019a4:	2201      	movne	r2, #1
 80019a6:	2200      	moveq	r2, #0
 80019a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d06e      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d069      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019dc:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e8:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0a9      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f8:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a55      	ldr	r2, [pc, #340]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f928 	bl	8000c58 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f924 	bl	8000c58 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e096      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x7ac>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a64:	0912      	lsrs	r2, r2, #4
 8001a66:	0452      	lsls	r2, r2, #17
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	493a      	ldr	r1, [pc, #232]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f8e6 	bl	8000c58 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f8e2 	bl	8000c58 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e054      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e04c      	b.n	8001b4a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04b      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d144      	bne.n	8001b4a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad8:	f7ff f8be 	bl	8000c58 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8ba 	bl	8000c58 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e02c      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x734>
 8001afe:	e024      	b.n	8001b4a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d01f      	beq.n	8001b46 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8a1 	bl	8000c58 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f89d 	bl	8000c58 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4905      	ldr	r1, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x7a8>)
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_OscConfig+0x7b0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e001      	b.n	8001b4a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	f99d808c 	.word	0xf99d808c
 8001b5c:	feeefffc 	.word	0xfeeefffc

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0e7      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	4970      	ldr	r1, [pc, #448]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cf      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d908      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4960      	ldr	r1, [pc, #384]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d04c      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d121      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0a6      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d115      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e09a      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c16:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e08e      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e086      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0203 	bic.w	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4943      	ldr	r1, [pc, #268]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c48:	f7ff f806 	bl	8000c58 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7ff f802 	bl	8000c58 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e06e      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 020c 	and.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1eb      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	492b      	ldr	r1, [pc, #172]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d210      	bcs.n	8001cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 0207 	bic.w	r2, r3, #7
 8001cbc:	4923      	ldr	r1, [pc, #140]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e036      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	4918      	ldr	r1, [pc, #96]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4910      	ldr	r1, [pc, #64]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d14:	f000 f824 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	490b      	ldr	r1, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1f4>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1fc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe ff3d 	bl	8000bb8 <HAL_InitTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d42:	7afb      	ldrb	r3, [r7, #11]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080045c4 	.word	0x080045c4
 8001d58:	20000014 	.word	0x20000014
 8001d5c:	20000018 	.word	0x20000018

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b3e      	ldr	r3, [pc, #248]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x34>
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d121      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d11e      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dbc:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e004      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d134      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d003      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0xac>
 8001e04:	e005      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e08:	617b      	str	r3, [r7, #20]
      break;
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0e:	617b      	str	r3, [r7, #20]
      break;
 8001e10:	e002      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	617b      	str	r3, [r7, #20]
      break;
 8001e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	3301      	adds	r3, #1
 8001e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	fb02 f203 	mul.w	r2, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	0e5b      	lsrs	r3, r3, #25
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e58:	69bb      	ldr	r3, [r7, #24]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080045dc 	.word	0x080045dc
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	007a1200 	.word	0x007a1200

08001e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000014 	.word	0x20000014

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	080045d4 	.word	0x080045d4

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec0:	f7ff ffda 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0adb      	lsrs	r3, r3, #11
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	080045d4 	.word	0x080045d4

08001ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f00:	f7ff f9f0 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f04:	6178      	str	r0, [r7, #20]
 8001f06:	e014      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff f9e0 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f38:	d10b      	bne.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d919      	bls.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2ba0      	cmp	r3, #160	; 0xa0
 8001f44:	d902      	bls.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f46:	2302      	movs	r3, #2
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e013      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e010      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d902      	bls.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f58:	2303      	movs	r3, #3
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e00a      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d102      	bne.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e004      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b70      	cmp	r3, #112	; 0x70
 8001f6e:	d101      	bne.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0207 	bic.w	r2, r3, #7
 8001f7c:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d041      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fcc:	d02a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd2:	d824      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd8:	d008      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fde:	d81e      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe8:	d010      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fea:	e018      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fec:	4b86      	ldr	r3, [pc, #536]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a85      	ldr	r2, [pc, #532]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff8:	e015      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f000 facb 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002006:	4603      	mov	r3, r0
 8002008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200a:	e00c      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3320      	adds	r3, #32
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fbb6 	bl	8002784 <RCCEx_PLLSAI2_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800201c:	e003      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	74fb      	strb	r3, [r7, #19]
      break;
 8002022:	e000      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202c:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203a:	4973      	ldr	r1, [pc, #460]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002042:	e001      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d041      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800205c:	d02a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800205e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002062:	d824      	bhi.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002068:	d008      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800206e:	d81e      	bhi.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d010      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207a:	e018      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a61      	ldr	r2, [pc, #388]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002088:	e015      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fa83 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002096:	4603      	mov	r3, r0
 8002098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209a:	e00c      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3320      	adds	r3, #32
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fb6e 	bl	8002784 <RCCEx_PLLSAI2_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ac:	e003      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	74fb      	strb	r3, [r7, #19]
      break;
 80020b2:	e000      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10b      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ca:	494f      	ldr	r1, [pc, #316]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020d2:	e001      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a0 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a40      	ldr	r2, [pc, #256]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002118:	2301      	movs	r3, #1
 800211a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3a      	ldr	r2, [pc, #232]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002128:	f7fe fd96 	bl	8000c58 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800212e:	e009      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fd92 	bl	8000c58 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d902      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	74fb      	strb	r3, [r7, #19]
        break;
 8002142:	e005      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ef      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d15c      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01f      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d019      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd51 	bl	8000c58 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	e00b      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe fd4d 	bl	8000c58 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	74fb      	strb	r3, [r7, #19]
            break;
 80021d0:	e006      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ec      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f6:	4904      	ldr	r1, [pc, #16]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021fe:	e009      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	74bb      	strb	r3, [r7, #18]
 8002204:	e006      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002214:	7c7b      	ldrb	r3, [r7, #17]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a9d      	ldr	r2, [pc, #628]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002232:	4b98      	ldr	r3, [pc, #608]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	4994      	ldr	r1, [pc, #592]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 020c 	bic.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	498c      	ldr	r1, [pc, #560]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002276:	4b87      	ldr	r3, [pc, #540]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4983      	ldr	r1, [pc, #524]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002298:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	497b      	ldr	r1, [pc, #492]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	4972      	ldr	r1, [pc, #456]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022dc:	4b6d      	ldr	r3, [pc, #436]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	496a      	ldr	r1, [pc, #424]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	4961      	ldr	r1, [pc, #388]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002320:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	4959      	ldr	r1, [pc, #356]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002342:	4b54      	ldr	r3, [pc, #336]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	4950      	ldr	r1, [pc, #320]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	4948      	ldr	r1, [pc, #288]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	493f      	ldr	r1, [pc, #252]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d028      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b6:	4937      	ldr	r1, [pc, #220]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c8:	4b32      	ldr	r3, [pc, #200]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a31      	ldr	r2, [pc, #196]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	e011      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023de:	d10c      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f8d8 	bl	800259c <RCCEx_PLLSAI1_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	491f      	ldr	r1, [pc, #124]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002424:	d106      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002430:	60d3      	str	r3, [r2, #12]
 8002432:	e011      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800243c:	d10c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f8a9 	bl	800259c <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d02b      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002482:	d109      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a02      	ldr	r2, [pc, #8]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	e014      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f877 	bl	800259c <RCCEx_PLLSAI1_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02f      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d6:	4928      	ldr	r1, [pc, #160]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e6:	d10d      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f854 	bl	800259c <RCCEx_PLLSAI1_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d014      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	74bb      	strb	r3, [r7, #18]
 8002502:	e011      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d10c      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3320      	adds	r3, #32
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f935 	bl	8002784 <RCCEx_PLLSAI2_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002542:	490d      	ldr	r1, [pc, #52]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002566:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800256e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	4b75      	ldr	r3, [pc, #468]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b6:	4b72      	ldr	r3, [pc, #456]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ce:	4b6c      	ldr	r3, [pc, #432]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
       ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d047      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e044      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d018      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x86>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d825      	bhi.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x62>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d009      	beq.n	8002610 <RCCEx_PLLSAI1_Config+0x74>
 80025fc:	e020      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260e:	e01a      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e013      	b.n	800264a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263e:	e006      	b.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e004      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	430b      	orrs	r3, r1
 800266c:	4944      	ldr	r1, [pc, #272]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d17d      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fae8 	bl	8000c58 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268a:	e009      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800268c:	f7fe fae4 	bl	8000c58 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	73fb      	strb	r3, [r7, #15]
        break;
 800269e:	e005      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ef      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d160      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	0912      	lsrs	r2, r2, #4
 80026d0:	0452      	lsls	r2, r2, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	492a      	ldr	r1, [pc, #168]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
 80026da:	e027      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d112      	bne.n	8002708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	0211      	lsls	r1, r2, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6912      	ldr	r2, [r2, #16]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0552      	lsls	r2, r2, #21
 80026fe:	430a      	orrs	r2, r1
 8002700:	491f      	ldr	r1, [pc, #124]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
 8002706:	e011      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6952      	ldr	r2, [r2, #20]
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	430a      	orrs	r2, r1
 8002726:	4916      	ldr	r1, [pc, #88]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fa8e 	bl	8000c58 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002740:	f7fe fa8a 	bl	8000c58 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
          break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d047      	beq.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e044      	b.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d018      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x86>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d825      	bhi.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d002      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x62>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d009      	beq.n	80027f8 <RCCEx_PLLSAI2_Config+0x74>
 80027e4:	e020      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e6:	4b55      	ldr	r3, [pc, #340]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e01a      	b.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e013      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002826:	e006      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e004      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
    }

    if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	430b      	orrs	r3, r1
 8002854:	4939      	ldr	r1, [pc, #228]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d167      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a35      	ldr	r2, [pc, #212]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe f9f4 	bl	8000c58 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002874:	f7fe f9f0 	bl	8000c58 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
        break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ef      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14a      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0912      	lsrs	r2, r2, #4
 80028b8:	0452      	lsls	r2, r2, #17
 80028ba:	430a      	orrs	r2, r1
 80028bc:	491f      	ldr	r1, [pc, #124]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	614b      	str	r3, [r1, #20]
 80028c2:	e011      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0652      	lsls	r2, r2, #25
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4916      	ldr	r1, [pc, #88]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a13      	ldr	r2, [pc, #76]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe f9b0 	bl	8000c58 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fc:	f7fe f9ac 	bl	8000c58 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
          break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4904      	ldr	r1, [pc, #16]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e049      	b.n	80029e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd ffc2 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fab6 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04f      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d018      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d115      	bne.n	8002a92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d015      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d011      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	e008      	b.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40013400 	.word	0x40013400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	00010007 	.word	0x00010007

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9ce 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9c0 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f9d1 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9a4 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f996 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9a7 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f97a 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f96c 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f97d 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f950 	bl	8002eb4 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f942 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f953 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd fcc4 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fafe 	bl	800327c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8e:	d10e      	bne.n	8002cae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 faf1 	bl	8003290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d10e      	bne.n	8002cda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d107      	bne.n	8002cda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f901 	bl	8002edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d10e      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0220 	mvn.w	r2, #32
 8002cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fab1 	bl	8003268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_ConfigClockSource+0x1c>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0b6      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x18a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	d03e      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xd8>
 8002d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6c:	f200 8087 	bhi.w	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	f000 8086 	beq.w	8002e84 <HAL_TIM_ConfigClockSource+0x176>
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	d87f      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d7e:	2b70      	cmp	r3, #112	; 0x70
 8002d80:	d01a      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0xaa>
 8002d82:	2b70      	cmp	r3, #112	; 0x70
 8002d84:	d87b      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d86:	2b60      	cmp	r3, #96	; 0x60
 8002d88:	d050      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x11e>
 8002d8a:	2b60      	cmp	r3, #96	; 0x60
 8002d8c:	d877      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d8e:	2b50      	cmp	r3, #80	; 0x50
 8002d90:	d03c      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0xfe>
 8002d92:	2b50      	cmp	r3, #80	; 0x50
 8002d94:	d873      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d058      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0x13e>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d86f      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002d9e:	2b30      	cmp	r3, #48	; 0x30
 8002da0:	d064      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x15e>
 8002da2:	2b30      	cmp	r3, #48	; 0x30
 8002da4:	d86b      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d060      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x15e>
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d867      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d05c      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x15e>
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d05a      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x15e>
 8002db6:	e062      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f000 f9a6 	bl	8003118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e04f      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f000 f98f 	bl	8003118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e08:	609a      	str	r2, [r3, #8]
      break;
 8002e0a:	e03c      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f000 f903 	bl	8003024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2150      	movs	r1, #80	; 0x50
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f95c 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002e2a:	e02c      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f000 f922 	bl	8003082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2160      	movs	r1, #96	; 0x60
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f94c 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002e4a:	e01c      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f000 f8e3 	bl	8003024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2140      	movs	r1, #64	; 0x40
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f93c 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002e6a:	e00c      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 f933 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e003      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e000      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002e84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <TIM_Base_SetConfig+0x114>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0e:	d00f      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3d      	ldr	r2, [pc, #244]	; (8003008 <TIM_Base_SetConfig+0x118>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3c      	ldr	r2, [pc, #240]	; (800300c <TIM_Base_SetConfig+0x11c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <TIM_Base_SetConfig+0x120>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <TIM_Base_SetConfig+0x124>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d108      	bne.n	8002f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <TIM_Base_SetConfig+0x114>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d01b      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <TIM_Base_SetConfig+0x118>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d017      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	; (800300c <TIM_Base_SetConfig+0x11c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <TIM_Base_SetConfig+0x120>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00f      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <TIM_Base_SetConfig+0x124>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a28      	ldr	r2, [pc, #160]	; (8003018 <TIM_Base_SetConfig+0x128>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <TIM_Base_SetConfig+0x12c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x9a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <TIM_Base_SetConfig+0x130>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a10      	ldr	r2, [pc, #64]	; (8003004 <TIM_Base_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00f      	beq.n	8002fe8 <TIM_Base_SetConfig+0xf8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <TIM_Base_SetConfig+0x124>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0xf8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a11      	ldr	r2, [pc, #68]	; (8003018 <TIM_Base_SetConfig+0x128>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0xf8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <TIM_Base_SetConfig+0x12c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0xf8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <TIM_Base_SetConfig+0x130>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40013400 	.word	0x40013400
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800

08003024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0201 	bic.w	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 030a 	bic.w	r3, r3, #10
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003082:	b480      	push	{r7}
 8003084:	b087      	sub	sp, #28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0210 	bic.w	r2, r3, #16
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	031b      	lsls	r3, r3, #12
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	f043 0307 	orr.w	r3, r3, #7
 8003104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	021a      	lsls	r2, r3, #8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	431a      	orrs	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800316c:	2302      	movs	r3, #2
 800316e:	e068      	b.n	8003242 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2e      	ldr	r2, [pc, #184]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d018      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1a      	ldr	r2, [pc, #104]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10c      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40013400 	.word	0x40013400
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40014000 	.word	0x40014000

08003268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e040      	b.n	8003338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fb5c 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8c0 	bl	8003468 <UART_SetConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fb3e 	bl	800397c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fbc5 	bl	8003ac0 <UART_CheckIdleState>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 8082 	bne.w	800345e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_UART_Transmit+0x26>
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07a      	b.n	8003460 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_UART_Transmit+0x38>
 8003374:	2302      	movs	r3, #2
 8003376:	e073      	b.n	8003460 <HAL_UART_Transmit+0x120>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2221      	movs	r2, #33	; 0x21
 800338c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fd fc63 	bl	8000c58 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d108      	bne.n	80033c0 <HAL_UART_Transmit+0x80>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033d0:	e02d      	b.n	800342e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fbb8 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e039      	b.n	8003460 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fe:	b292      	uxth	r2, r2
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	3302      	adds	r3, #2
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e008      	b.n	800341c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b292      	uxth	r2, r2
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3301      	adds	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1cb      	bne.n	80033d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb84 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e005      	b.n	8003460 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4313      	orrs	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4bad      	ldr	r3, [pc, #692]	; (8003748 <UART_SetConfig+0x2e0>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	69f9      	ldr	r1, [r7, #28]
 800349c:	430b      	orrs	r3, r1
 800349e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4aa2      	ldr	r2, [pc, #648]	; (800374c <UART_SetConfig+0x2e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a99      	ldr	r2, [pc, #612]	; (8003750 <UART_SetConfig+0x2e8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d121      	bne.n	8003532 <UART_SetConfig+0xca>
 80034ee:	4b99      	ldr	r3, [pc, #612]	; (8003754 <UART_SetConfig+0x2ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d817      	bhi.n	800352c <UART_SetConfig+0xc4>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <UART_SetConfig+0x9c>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	08003521 	.word	0x08003521
 800350c:	0800351b 	.word	0x0800351b
 8003510:	08003527 	.word	0x08003527
 8003514:	2301      	movs	r3, #1
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e0e7      	b.n	80036ea <UART_SetConfig+0x282>
 800351a:	2302      	movs	r3, #2
 800351c:	76fb      	strb	r3, [r7, #27]
 800351e:	e0e4      	b.n	80036ea <UART_SetConfig+0x282>
 8003520:	2304      	movs	r3, #4
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	e0e1      	b.n	80036ea <UART_SetConfig+0x282>
 8003526:	2308      	movs	r3, #8
 8003528:	76fb      	strb	r3, [r7, #27]
 800352a:	e0de      	b.n	80036ea <UART_SetConfig+0x282>
 800352c:	2310      	movs	r3, #16
 800352e:	76fb      	strb	r3, [r7, #27]
 8003530:	e0db      	b.n	80036ea <UART_SetConfig+0x282>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a88      	ldr	r2, [pc, #544]	; (8003758 <UART_SetConfig+0x2f0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d132      	bne.n	80035a2 <UART_SetConfig+0x13a>
 800353c:	4b85      	ldr	r3, [pc, #532]	; (8003754 <UART_SetConfig+0x2ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d828      	bhi.n	800359c <UART_SetConfig+0x134>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0xe8>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003585 	.word	0x08003585
 8003554:	0800359d 	.word	0x0800359d
 8003558:	0800359d 	.word	0x0800359d
 800355c:	0800359d 	.word	0x0800359d
 8003560:	08003591 	.word	0x08003591
 8003564:	0800359d 	.word	0x0800359d
 8003568:	0800359d 	.word	0x0800359d
 800356c:	0800359d 	.word	0x0800359d
 8003570:	0800358b 	.word	0x0800358b
 8003574:	0800359d 	.word	0x0800359d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	0800359d 	.word	0x0800359d
 8003580:	08003597 	.word	0x08003597
 8003584:	2300      	movs	r3, #0
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e0af      	b.n	80036ea <UART_SetConfig+0x282>
 800358a:	2302      	movs	r3, #2
 800358c:	76fb      	strb	r3, [r7, #27]
 800358e:	e0ac      	b.n	80036ea <UART_SetConfig+0x282>
 8003590:	2304      	movs	r3, #4
 8003592:	76fb      	strb	r3, [r7, #27]
 8003594:	e0a9      	b.n	80036ea <UART_SetConfig+0x282>
 8003596:	2308      	movs	r3, #8
 8003598:	76fb      	strb	r3, [r7, #27]
 800359a:	e0a6      	b.n	80036ea <UART_SetConfig+0x282>
 800359c:	2310      	movs	r3, #16
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e0a3      	b.n	80036ea <UART_SetConfig+0x282>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6d      	ldr	r2, [pc, #436]	; (800375c <UART_SetConfig+0x2f4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d120      	bne.n	80035ee <UART_SetConfig+0x186>
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <UART_SetConfig+0x2ec>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035b6:	2b30      	cmp	r3, #48	; 0x30
 80035b8:	d013      	beq.n	80035e2 <UART_SetConfig+0x17a>
 80035ba:	2b30      	cmp	r3, #48	; 0x30
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x180>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d009      	beq.n	80035d6 <UART_SetConfig+0x16e>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d810      	bhi.n	80035e8 <UART_SetConfig+0x180>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x168>
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d006      	beq.n	80035dc <UART_SetConfig+0x174>
 80035ce:	e00b      	b.n	80035e8 <UART_SetConfig+0x180>
 80035d0:	2300      	movs	r3, #0
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	e089      	b.n	80036ea <UART_SetConfig+0x282>
 80035d6:	2302      	movs	r3, #2
 80035d8:	76fb      	strb	r3, [r7, #27]
 80035da:	e086      	b.n	80036ea <UART_SetConfig+0x282>
 80035dc:	2304      	movs	r3, #4
 80035de:	76fb      	strb	r3, [r7, #27]
 80035e0:	e083      	b.n	80036ea <UART_SetConfig+0x282>
 80035e2:	2308      	movs	r3, #8
 80035e4:	76fb      	strb	r3, [r7, #27]
 80035e6:	e080      	b.n	80036ea <UART_SetConfig+0x282>
 80035e8:	2310      	movs	r3, #16
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e07d      	b.n	80036ea <UART_SetConfig+0x282>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5b      	ldr	r2, [pc, #364]	; (8003760 <UART_SetConfig+0x2f8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <UART_SetConfig+0x1d2>
 80035f8:	4b56      	ldr	r3, [pc, #344]	; (8003754 <UART_SetConfig+0x2ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003602:	2bc0      	cmp	r3, #192	; 0xc0
 8003604:	d013      	beq.n	800362e <UART_SetConfig+0x1c6>
 8003606:	2bc0      	cmp	r3, #192	; 0xc0
 8003608:	d814      	bhi.n	8003634 <UART_SetConfig+0x1cc>
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d009      	beq.n	8003622 <UART_SetConfig+0x1ba>
 800360e:	2b80      	cmp	r3, #128	; 0x80
 8003610:	d810      	bhi.n	8003634 <UART_SetConfig+0x1cc>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <UART_SetConfig+0x1b4>
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x1c0>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x1cc>
 800361c:	2300      	movs	r3, #0
 800361e:	76fb      	strb	r3, [r7, #27]
 8003620:	e063      	b.n	80036ea <UART_SetConfig+0x282>
 8003622:	2302      	movs	r3, #2
 8003624:	76fb      	strb	r3, [r7, #27]
 8003626:	e060      	b.n	80036ea <UART_SetConfig+0x282>
 8003628:	2304      	movs	r3, #4
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e05d      	b.n	80036ea <UART_SetConfig+0x282>
 800362e:	2308      	movs	r3, #8
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e05a      	b.n	80036ea <UART_SetConfig+0x282>
 8003634:	2310      	movs	r3, #16
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e057      	b.n	80036ea <UART_SetConfig+0x282>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a49      	ldr	r2, [pc, #292]	; (8003764 <UART_SetConfig+0x2fc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d125      	bne.n	8003690 <UART_SetConfig+0x228>
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <UART_SetConfig+0x2ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003652:	d017      	beq.n	8003684 <UART_SetConfig+0x21c>
 8003654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003658:	d817      	bhi.n	800368a <UART_SetConfig+0x222>
 800365a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365e:	d00b      	beq.n	8003678 <UART_SetConfig+0x210>
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d811      	bhi.n	800368a <UART_SetConfig+0x222>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <UART_SetConfig+0x20a>
 800366a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366e:	d006      	beq.n	800367e <UART_SetConfig+0x216>
 8003670:	e00b      	b.n	800368a <UART_SetConfig+0x222>
 8003672:	2300      	movs	r3, #0
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e038      	b.n	80036ea <UART_SetConfig+0x282>
 8003678:	2302      	movs	r3, #2
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	e035      	b.n	80036ea <UART_SetConfig+0x282>
 800367e:	2304      	movs	r3, #4
 8003680:	76fb      	strb	r3, [r7, #27]
 8003682:	e032      	b.n	80036ea <UART_SetConfig+0x282>
 8003684:	2308      	movs	r3, #8
 8003686:	76fb      	strb	r3, [r7, #27]
 8003688:	e02f      	b.n	80036ea <UART_SetConfig+0x282>
 800368a:	2310      	movs	r3, #16
 800368c:	76fb      	strb	r3, [r7, #27]
 800368e:	e02c      	b.n	80036ea <UART_SetConfig+0x282>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2d      	ldr	r2, [pc, #180]	; (800374c <UART_SetConfig+0x2e4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d125      	bne.n	80036e6 <UART_SetConfig+0x27e>
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <UART_SetConfig+0x2ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a8:	d017      	beq.n	80036da <UART_SetConfig+0x272>
 80036aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ae:	d817      	bhi.n	80036e0 <UART_SetConfig+0x278>
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b4:	d00b      	beq.n	80036ce <UART_SetConfig+0x266>
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	d811      	bhi.n	80036e0 <UART_SetConfig+0x278>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <UART_SetConfig+0x260>
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d006      	beq.n	80036d4 <UART_SetConfig+0x26c>
 80036c6:	e00b      	b.n	80036e0 <UART_SetConfig+0x278>
 80036c8:	2300      	movs	r3, #0
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e00d      	b.n	80036ea <UART_SetConfig+0x282>
 80036ce:	2302      	movs	r3, #2
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e00a      	b.n	80036ea <UART_SetConfig+0x282>
 80036d4:	2304      	movs	r3, #4
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	e007      	b.n	80036ea <UART_SetConfig+0x282>
 80036da:	2308      	movs	r3, #8
 80036dc:	76fb      	strb	r3, [r7, #27]
 80036de:	e004      	b.n	80036ea <UART_SetConfig+0x282>
 80036e0:	2310      	movs	r3, #16
 80036e2:	76fb      	strb	r3, [r7, #27]
 80036e4:	e001      	b.n	80036ea <UART_SetConfig+0x282>
 80036e6:	2310      	movs	r3, #16
 80036e8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <UART_SetConfig+0x2e4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	f040 8087 	bne.w	8003804 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036f6:	7efb      	ldrb	r3, [r7, #27]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d837      	bhi.n	800376c <UART_SetConfig+0x304>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0x29c>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003729 	.word	0x08003729
 8003708:	0800376d 	.word	0x0800376d
 800370c:	08003731 	.word	0x08003731
 8003710:	0800376d 	.word	0x0800376d
 8003714:	08003737 	.word	0x08003737
 8003718:	0800376d 	.word	0x0800376d
 800371c:	0800376d 	.word	0x0800376d
 8003720:	0800376d 	.word	0x0800376d
 8003724:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003728:	f7fe fbb2 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 800372c:	6178      	str	r0, [r7, #20]
        break;
 800372e:	e022      	b.n	8003776 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <UART_SetConfig+0x300>)
 8003732:	617b      	str	r3, [r7, #20]
        break;
 8003734:	e01f      	b.n	8003776 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe fb13 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 800373a:	6178      	str	r0, [r7, #20]
        break;
 800373c:	e01b      	b.n	8003776 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	617b      	str	r3, [r7, #20]
        break;
 8003744:	e017      	b.n	8003776 <UART_SetConfig+0x30e>
 8003746:	bf00      	nop
 8003748:	efff69f3 	.word	0xefff69f3
 800374c:	40008000 	.word	0x40008000
 8003750:	40013800 	.word	0x40013800
 8003754:	40021000 	.word	0x40021000
 8003758:	40004400 	.word	0x40004400
 800375c:	40004800 	.word	0x40004800
 8003760:	40004c00 	.word	0x40004c00
 8003764:	40005000 	.word	0x40005000
 8003768:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	76bb      	strb	r3, [r7, #26]
        break;
 8003774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80f1 	beq.w	8003960 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	429a      	cmp	r2, r3
 800378c:	d305      	bcc.n	800379a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	429a      	cmp	r2, r3
 8003798:	d902      	bls.n	80037a0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	76bb      	strb	r3, [r7, #26]
 800379e:	e0df      	b.n	8003960 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	020b      	lsls	r3, r1, #8
 80037b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037b6:	0202      	lsls	r2, r0, #8
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	6849      	ldr	r1, [r1, #4]
 80037bc:	0849      	lsrs	r1, r1, #1
 80037be:	4608      	mov	r0, r1
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	1814      	adds	r4, r2, r0
 80037c6:	eb43 0501 	adc.w	r5, r3, r1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	4620      	mov	r0, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	f7fc fd4a 	bl	8000270 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4613      	mov	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d308      	bcc.n	80037fe <UART_SetConfig+0x396>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f2:	d204      	bcs.n	80037fe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	e0b0      	b.n	8003960 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	76bb      	strb	r3, [r7, #26]
 8003802:	e0ad      	b.n	8003960 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380c:	d15b      	bne.n	80038c6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d828      	bhi.n	8003866 <UART_SetConfig+0x3fe>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0x3b4>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003841 	.word	0x08003841
 8003820:	08003849 	.word	0x08003849
 8003824:	08003851 	.word	0x08003851
 8003828:	08003867 	.word	0x08003867
 800382c:	08003857 	.word	0x08003857
 8003830:	08003867 	.word	0x08003867
 8003834:	08003867 	.word	0x08003867
 8003838:	08003867 	.word	0x08003867
 800383c:	0800385f 	.word	0x0800385f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7fe fb26 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8003844:	6178      	str	r0, [r7, #20]
        break;
 8003846:	e013      	b.n	8003870 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7fe fb38 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 800384c:	6178      	str	r0, [r7, #20]
        break;
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003850:	4b49      	ldr	r3, [pc, #292]	; (8003978 <UART_SetConfig+0x510>)
 8003852:	617b      	str	r3, [r7, #20]
        break;
 8003854:	e00c      	b.n	8003870 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003856:	f7fe fa83 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 800385a:	6178      	str	r0, [r7, #20]
        break;
 800385c:	e008      	b.n	8003870 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003862:	617b      	str	r3, [r7, #20]
        break;
 8003864:	e004      	b.n	8003870 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	76bb      	strb	r3, [r7, #26]
        break;
 800386e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d074      	beq.n	8003960 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d916      	bls.n	80038c0 <UART_SetConfig+0x458>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d212      	bcs.n	80038c0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f023 030f 	bic.w	r3, r3, #15
 80038a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	89fa      	ldrh	r2, [r7, #14]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e04f      	b.n	8003960 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	76bb      	strb	r3, [r7, #26]
 80038c4:	e04c      	b.n	8003960 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c6:	7efb      	ldrb	r3, [r7, #27]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d828      	bhi.n	800391e <UART_SetConfig+0x4b6>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0x46c>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe faca 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 80038fc:	6178      	str	r0, [r7, #20]
        break;
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fadc 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8003904:	6178      	str	r0, [r7, #20]
        break;
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <UART_SetConfig+0x510>)
 800390a:	617b      	str	r3, [r7, #20]
        break;
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe fa27 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8003912:	6178      	str	r0, [r7, #20]
        break;
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	617b      	str	r3, [r7, #20]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	76bb      	strb	r3, [r7, #26]
        break;
 8003926:	bf00      	nop
    }

    if (pclk != 0U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085a      	lsrs	r2, r3, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b0f      	cmp	r3, #15
 8003946:	d909      	bls.n	800395c <UART_SetConfig+0x4f4>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d205      	bcs.n	800395c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e001      	b.n	8003960 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800396c:	7ebb      	ldrb	r3, [r7, #26]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bdb0      	pop	{r4, r5, r7, pc}
 8003976:	bf00      	nop
 8003978:	00f42400 	.word	0x00f42400

0800397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7a:	d10a      	bne.n	8003a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd f8c2 	bl	8000c58 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d10e      	bne.n	8003b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f82d 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e023      	b.n	8003b4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d10e      	bne.n	8003b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f817 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e00d      	b.n	8003b4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b09c      	sub	sp, #112	; 0x70
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	e0a5      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	f000 80a1 	beq.w	8003cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd f873 	bl	8000c58 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13e      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b98:	667b      	str	r3, [r7, #100]	; 0x64
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e6      	bne.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e067      	b.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d04f      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1e:	d147      	bne.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c7c:	623a      	str	r2, [r7, #32]
 8003c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e010      	b.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	f43f af4a 	beq.w	8003b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3770      	adds	r7, #112	; 0x70
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <__errno>:
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <__errno+0x8>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000020 	.word	0x20000020

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	; (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	; (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	; (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 fc4e 	bl	800459c <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08004648 	.word	0x08004648
 8003d24:	08004648 	.word	0x08004648
 8003d28:	08004648 	.word	0x08004648
 8003d2c:	0800464c 	.word	0x0800464c

08003d30 <memset>:
 8003d30:	4402      	add	r2, r0
 8003d32:	4603      	mov	r3, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <siprintf>:
 8003d40:	b40e      	push	{r1, r2, r3}
 8003d42:	b500      	push	{lr}
 8003d44:	b09c      	sub	sp, #112	; 0x70
 8003d46:	ab1d      	add	r3, sp, #116	; 0x74
 8003d48:	9002      	str	r0, [sp, #8]
 8003d4a:	9006      	str	r0, [sp, #24]
 8003d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d50:	4809      	ldr	r0, [pc, #36]	; (8003d78 <siprintf+0x38>)
 8003d52:	9107      	str	r1, [sp, #28]
 8003d54:	9104      	str	r1, [sp, #16]
 8003d56:	4909      	ldr	r1, [pc, #36]	; (8003d7c <siprintf+0x3c>)
 8003d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d5c:	9105      	str	r1, [sp, #20]
 8003d5e:	6800      	ldr	r0, [r0, #0]
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	a902      	add	r1, sp, #8
 8003d64:	f000 f868 	bl	8003e38 <_svfiprintf_r>
 8003d68:	9b02      	ldr	r3, [sp, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	b01c      	add	sp, #112	; 0x70
 8003d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d74:	b003      	add	sp, #12
 8003d76:	4770      	bx	lr
 8003d78:	20000020 	.word	0x20000020
 8003d7c:	ffff0208 	.word	0xffff0208

08003d80 <__ssputs_r>:
 8003d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d84:	688e      	ldr	r6, [r1, #8]
 8003d86:	429e      	cmp	r6, r3
 8003d88:	4682      	mov	sl, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	461f      	mov	r7, r3
 8003d90:	d838      	bhi.n	8003e04 <__ssputs_r+0x84>
 8003d92:	898a      	ldrh	r2, [r1, #12]
 8003d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d98:	d032      	beq.n	8003e00 <__ssputs_r+0x80>
 8003d9a:	6825      	ldr	r5, [r4, #0]
 8003d9c:	6909      	ldr	r1, [r1, #16]
 8003d9e:	eba5 0901 	sub.w	r9, r5, r1
 8003da2:	6965      	ldr	r5, [r4, #20]
 8003da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dac:	3301      	adds	r3, #1
 8003dae:	444b      	add	r3, r9
 8003db0:	106d      	asrs	r5, r5, #1
 8003db2:	429d      	cmp	r5, r3
 8003db4:	bf38      	it	cc
 8003db6:	461d      	movcc	r5, r3
 8003db8:	0553      	lsls	r3, r2, #21
 8003dba:	d531      	bpl.n	8003e20 <__ssputs_r+0xa0>
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f000 fb47 	bl	8004450 <_malloc_r>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	b950      	cbnz	r0, 8003ddc <__ssputs_r+0x5c>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	f8ca 3000 	str.w	r3, [sl]
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd2:	81a3      	strh	r3, [r4, #12]
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	464a      	mov	r2, r9
 8003de0:	f000 fabe 	bl	8004360 <memcpy>
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	6126      	str	r6, [r4, #16]
 8003df2:	6165      	str	r5, [r4, #20]
 8003df4:	444e      	add	r6, r9
 8003df6:	eba5 0509 	sub.w	r5, r5, r9
 8003dfa:	6026      	str	r6, [r4, #0]
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	463e      	mov	r6, r7
 8003e00:	42be      	cmp	r6, r7
 8003e02:	d900      	bls.n	8003e06 <__ssputs_r+0x86>
 8003e04:	463e      	mov	r6, r7
 8003e06:	4632      	mov	r2, r6
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	f000 fab6 	bl	800437c <memmove>
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	6822      	ldr	r2, [r4, #0]
 8003e14:	1b9b      	subs	r3, r3, r6
 8003e16:	4432      	add	r2, r6
 8003e18:	60a3      	str	r3, [r4, #8]
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e7db      	b.n	8003dd8 <__ssputs_r+0x58>
 8003e20:	462a      	mov	r2, r5
 8003e22:	f000 fb6f 	bl	8004504 <_realloc_r>
 8003e26:	4606      	mov	r6, r0
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d1e1      	bne.n	8003df0 <__ssputs_r+0x70>
 8003e2c:	6921      	ldr	r1, [r4, #16]
 8003e2e:	4650      	mov	r0, sl
 8003e30:	f000 fabe 	bl	80043b0 <_free_r>
 8003e34:	e7c7      	b.n	8003dc6 <__ssputs_r+0x46>
	...

08003e38 <_svfiprintf_r>:
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	4698      	mov	r8, r3
 8003e3e:	898b      	ldrh	r3, [r1, #12]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	b09d      	sub	sp, #116	; 0x74
 8003e44:	4607      	mov	r7, r0
 8003e46:	460d      	mov	r5, r1
 8003e48:	4614      	mov	r4, r2
 8003e4a:	d50e      	bpl.n	8003e6a <_svfiprintf_r+0x32>
 8003e4c:	690b      	ldr	r3, [r1, #16]
 8003e4e:	b963      	cbnz	r3, 8003e6a <_svfiprintf_r+0x32>
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	f000 fafd 	bl	8004450 <_malloc_r>
 8003e56:	6028      	str	r0, [r5, #0]
 8003e58:	6128      	str	r0, [r5, #16]
 8003e5a:	b920      	cbnz	r0, 8003e66 <_svfiprintf_r+0x2e>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	e0d1      	b.n	800400a <_svfiprintf_r+0x1d2>
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	616b      	str	r3, [r5, #20]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6e:	2320      	movs	r3, #32
 8003e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004024 <_svfiprintf_r+0x1ec>
 8003e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e82:	f04f 0901 	mov.w	r9, #1
 8003e86:	4623      	mov	r3, r4
 8003e88:	469a      	mov	sl, r3
 8003e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e8e:	b10a      	cbz	r2, 8003e94 <_svfiprintf_r+0x5c>
 8003e90:	2a25      	cmp	r2, #37	; 0x25
 8003e92:	d1f9      	bne.n	8003e88 <_svfiprintf_r+0x50>
 8003e94:	ebba 0b04 	subs.w	fp, sl, r4
 8003e98:	d00b      	beq.n	8003eb2 <_svfiprintf_r+0x7a>
 8003e9a:	465b      	mov	r3, fp
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff ff6d 	bl	8003d80 <__ssputs_r>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f000 80aa 	beq.w	8004000 <_svfiprintf_r+0x1c8>
 8003eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eae:	445a      	add	r2, fp
 8003eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a2 	beq.w	8004000 <_svfiprintf_r+0x1c8>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec6:	f10a 0a01 	add.w	sl, sl, #1
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed4:	4654      	mov	r4, sl
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003edc:	4851      	ldr	r0, [pc, #324]	; (8004024 <_svfiprintf_r+0x1ec>)
 8003ede:	f7fc f977 	bl	80001d0 <memchr>
 8003ee2:	9a04      	ldr	r2, [sp, #16]
 8003ee4:	b9d8      	cbnz	r0, 8003f1e <_svfiprintf_r+0xe6>
 8003ee6:	06d0      	lsls	r0, r2, #27
 8003ee8:	bf44      	itt	mi
 8003eea:	2320      	movmi	r3, #32
 8003eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef0:	0711      	lsls	r1, r2, #28
 8003ef2:	bf44      	itt	mi
 8003ef4:	232b      	movmi	r3, #43	; 0x2b
 8003ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efa:	f89a 3000 	ldrb.w	r3, [sl]
 8003efe:	2b2a      	cmp	r3, #42	; 0x2a
 8003f00:	d015      	beq.n	8003f2e <_svfiprintf_r+0xf6>
 8003f02:	9a07      	ldr	r2, [sp, #28]
 8003f04:	4654      	mov	r4, sl
 8003f06:	2000      	movs	r0, #0
 8003f08:	f04f 0c0a 	mov.w	ip, #10
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f12:	3b30      	subs	r3, #48	; 0x30
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d94e      	bls.n	8003fb6 <_svfiprintf_r+0x17e>
 8003f18:	b1b0      	cbz	r0, 8003f48 <_svfiprintf_r+0x110>
 8003f1a:	9207      	str	r2, [sp, #28]
 8003f1c:	e014      	b.n	8003f48 <_svfiprintf_r+0x110>
 8003f1e:	eba0 0308 	sub.w	r3, r0, r8
 8003f22:	fa09 f303 	lsl.w	r3, r9, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	46a2      	mov	sl, r4
 8003f2c:	e7d2      	b.n	8003ed4 <_svfiprintf_r+0x9c>
 8003f2e:	9b03      	ldr	r3, [sp, #12]
 8003f30:	1d19      	adds	r1, r3, #4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	9103      	str	r1, [sp, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbb      	ittet	lt
 8003f3a:	425b      	neglt	r3, r3
 8003f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f40:	9307      	strge	r3, [sp, #28]
 8003f42:	9307      	strlt	r3, [sp, #28]
 8003f44:	bfb8      	it	lt
 8003f46:	9204      	strlt	r2, [sp, #16]
 8003f48:	7823      	ldrb	r3, [r4, #0]
 8003f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f4c:	d10c      	bne.n	8003f68 <_svfiprintf_r+0x130>
 8003f4e:	7863      	ldrb	r3, [r4, #1]
 8003f50:	2b2a      	cmp	r3, #42	; 0x2a
 8003f52:	d135      	bne.n	8003fc0 <_svfiprintf_r+0x188>
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	9203      	str	r2, [sp, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bfb8      	it	lt
 8003f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f64:	3402      	adds	r4, #2
 8003f66:	9305      	str	r3, [sp, #20]
 8003f68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004034 <_svfiprintf_r+0x1fc>
 8003f6c:	7821      	ldrb	r1, [r4, #0]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	4650      	mov	r0, sl
 8003f72:	f7fc f92d 	bl	80001d0 <memchr>
 8003f76:	b140      	cbz	r0, 8003f8a <_svfiprintf_r+0x152>
 8003f78:	2340      	movs	r3, #64	; 0x40
 8003f7a:	eba0 000a 	sub.w	r0, r0, sl
 8003f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f82:	9b04      	ldr	r3, [sp, #16]
 8003f84:	4303      	orrs	r3, r0
 8003f86:	3401      	adds	r4, #1
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8e:	4826      	ldr	r0, [pc, #152]	; (8004028 <_svfiprintf_r+0x1f0>)
 8003f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f94:	2206      	movs	r2, #6
 8003f96:	f7fc f91b 	bl	80001d0 <memchr>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d038      	beq.n	8004010 <_svfiprintf_r+0x1d8>
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <_svfiprintf_r+0x1f4>)
 8003fa0:	bb1b      	cbnz	r3, 8003fea <_svfiprintf_r+0x1b2>
 8003fa2:	9b03      	ldr	r3, [sp, #12]
 8003fa4:	3307      	adds	r3, #7
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	3308      	adds	r3, #8
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb0:	4433      	add	r3, r6
 8003fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb4:	e767      	b.n	8003e86 <_svfiprintf_r+0x4e>
 8003fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fba:	460c      	mov	r4, r1
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e7a5      	b.n	8003f0c <_svfiprintf_r+0xd4>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	3401      	adds	r4, #1
 8003fc4:	9305      	str	r3, [sp, #20]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f04f 0c0a 	mov.w	ip, #10
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd2:	3a30      	subs	r2, #48	; 0x30
 8003fd4:	2a09      	cmp	r2, #9
 8003fd6:	d903      	bls.n	8003fe0 <_svfiprintf_r+0x1a8>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0c5      	beq.n	8003f68 <_svfiprintf_r+0x130>
 8003fdc:	9105      	str	r1, [sp, #20]
 8003fde:	e7c3      	b.n	8003f68 <_svfiprintf_r+0x130>
 8003fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e7f0      	b.n	8003fcc <_svfiprintf_r+0x194>
 8003fea:	ab03      	add	r3, sp, #12
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	462a      	mov	r2, r5
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <_svfiprintf_r+0x1f8>)
 8003ff2:	a904      	add	r1, sp, #16
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	f3af 8000 	nop.w
 8003ffa:	1c42      	adds	r2, r0, #1
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	d1d6      	bne.n	8003fae <_svfiprintf_r+0x176>
 8004000:	89ab      	ldrh	r3, [r5, #12]
 8004002:	065b      	lsls	r3, r3, #25
 8004004:	f53f af2c 	bmi.w	8003e60 <_svfiprintf_r+0x28>
 8004008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800400a:	b01d      	add	sp, #116	; 0x74
 800400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004010:	ab03      	add	r3, sp, #12
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	462a      	mov	r2, r5
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <_svfiprintf_r+0x1f8>)
 8004018:	a904      	add	r1, sp, #16
 800401a:	4638      	mov	r0, r7
 800401c:	f000 f87a 	bl	8004114 <_printf_i>
 8004020:	e7eb      	b.n	8003ffa <_svfiprintf_r+0x1c2>
 8004022:	bf00      	nop
 8004024:	0800460c 	.word	0x0800460c
 8004028:	08004616 	.word	0x08004616
 800402c:	00000000 	.word	0x00000000
 8004030:	08003d81 	.word	0x08003d81
 8004034:	08004612 	.word	0x08004612

08004038 <_printf_common>:
 8004038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	4616      	mov	r6, r2
 800403e:	4699      	mov	r9, r3
 8004040:	688a      	ldr	r2, [r1, #8]
 8004042:	690b      	ldr	r3, [r1, #16]
 8004044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004048:	4293      	cmp	r3, r2
 800404a:	bfb8      	it	lt
 800404c:	4613      	movlt	r3, r2
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004054:	4607      	mov	r7, r0
 8004056:	460c      	mov	r4, r1
 8004058:	b10a      	cbz	r2, 800405e <_printf_common+0x26>
 800405a:	3301      	adds	r3, #1
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	0699      	lsls	r1, r3, #26
 8004062:	bf42      	ittt	mi
 8004064:	6833      	ldrmi	r3, [r6, #0]
 8004066:	3302      	addmi	r3, #2
 8004068:	6033      	strmi	r3, [r6, #0]
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	f015 0506 	ands.w	r5, r5, #6
 8004070:	d106      	bne.n	8004080 <_printf_common+0x48>
 8004072:	f104 0a19 	add.w	sl, r4, #25
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	6832      	ldr	r2, [r6, #0]
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	42ab      	cmp	r3, r5
 800407e:	dc26      	bgt.n	80040ce <_printf_common+0x96>
 8004080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004084:	1e13      	subs	r3, r2, #0
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	bf18      	it	ne
 800408a:	2301      	movne	r3, #1
 800408c:	0692      	lsls	r2, r2, #26
 800408e:	d42b      	bmi.n	80040e8 <_printf_common+0xb0>
 8004090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d01e      	beq.n	80040dc <_printf_common+0xa4>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	68e5      	ldr	r5, [r4, #12]
 80040a2:	6832      	ldr	r2, [r6, #0]
 80040a4:	f003 0306 	and.w	r3, r3, #6
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	bf08      	it	eq
 80040ac:	1aad      	subeq	r5, r5, r2
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	6922      	ldr	r2, [r4, #16]
 80040b2:	bf0c      	ite	eq
 80040b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b8:	2500      	movne	r5, #0
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bfc4      	itt	gt
 80040be:	1a9b      	subgt	r3, r3, r2
 80040c0:	18ed      	addgt	r5, r5, r3
 80040c2:	2600      	movs	r6, #0
 80040c4:	341a      	adds	r4, #26
 80040c6:	42b5      	cmp	r5, r6
 80040c8:	d11a      	bne.n	8004100 <_printf_common+0xc8>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e008      	b.n	80040e0 <_printf_common+0xa8>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4649      	mov	r1, r9
 80040d4:	4638      	mov	r0, r7
 80040d6:	47c0      	blx	r8
 80040d8:	3001      	adds	r0, #1
 80040da:	d103      	bne.n	80040e4 <_printf_common+0xac>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e4:	3501      	adds	r5, #1
 80040e6:	e7c6      	b.n	8004076 <_printf_common+0x3e>
 80040e8:	18e1      	adds	r1, r4, r3
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	2030      	movs	r0, #48	; 0x30
 80040ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f2:	4422      	add	r2, r4
 80040f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040fc:	3302      	adds	r3, #2
 80040fe:	e7c7      	b.n	8004090 <_printf_common+0x58>
 8004100:	2301      	movs	r3, #1
 8004102:	4622      	mov	r2, r4
 8004104:	4649      	mov	r1, r9
 8004106:	4638      	mov	r0, r7
 8004108:	47c0      	blx	r8
 800410a:	3001      	adds	r0, #1
 800410c:	d0e6      	beq.n	80040dc <_printf_common+0xa4>
 800410e:	3601      	adds	r6, #1
 8004110:	e7d9      	b.n	80040c6 <_printf_common+0x8e>
	...

08004114 <_printf_i>:
 8004114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	460c      	mov	r4, r1
 800411a:	4691      	mov	r9, r2
 800411c:	7e27      	ldrb	r7, [r4, #24]
 800411e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004120:	2f78      	cmp	r7, #120	; 0x78
 8004122:	4680      	mov	r8, r0
 8004124:	469a      	mov	sl, r3
 8004126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800412a:	d807      	bhi.n	800413c <_printf_i+0x28>
 800412c:	2f62      	cmp	r7, #98	; 0x62
 800412e:	d80a      	bhi.n	8004146 <_printf_i+0x32>
 8004130:	2f00      	cmp	r7, #0
 8004132:	f000 80d8 	beq.w	80042e6 <_printf_i+0x1d2>
 8004136:	2f58      	cmp	r7, #88	; 0x58
 8004138:	f000 80a3 	beq.w	8004282 <_printf_i+0x16e>
 800413c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004144:	e03a      	b.n	80041bc <_printf_i+0xa8>
 8004146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800414a:	2b15      	cmp	r3, #21
 800414c:	d8f6      	bhi.n	800413c <_printf_i+0x28>
 800414e:	a001      	add	r0, pc, #4	; (adr r0, 8004154 <_printf_i+0x40>)
 8004150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004154:	080041ad 	.word	0x080041ad
 8004158:	080041c1 	.word	0x080041c1
 800415c:	0800413d 	.word	0x0800413d
 8004160:	0800413d 	.word	0x0800413d
 8004164:	0800413d 	.word	0x0800413d
 8004168:	0800413d 	.word	0x0800413d
 800416c:	080041c1 	.word	0x080041c1
 8004170:	0800413d 	.word	0x0800413d
 8004174:	0800413d 	.word	0x0800413d
 8004178:	0800413d 	.word	0x0800413d
 800417c:	0800413d 	.word	0x0800413d
 8004180:	080042cd 	.word	0x080042cd
 8004184:	080041f1 	.word	0x080041f1
 8004188:	080042af 	.word	0x080042af
 800418c:	0800413d 	.word	0x0800413d
 8004190:	0800413d 	.word	0x0800413d
 8004194:	080042ef 	.word	0x080042ef
 8004198:	0800413d 	.word	0x0800413d
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	0800413d 	.word	0x0800413d
 80041a4:	0800413d 	.word	0x0800413d
 80041a8:	080042b7 	.word	0x080042b7
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	600a      	str	r2, [r1, #0]
 80041b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041bc:	2301      	movs	r3, #1
 80041be:	e0a3      	b.n	8004308 <_printf_i+0x1f4>
 80041c0:	6825      	ldr	r5, [r4, #0]
 80041c2:	6808      	ldr	r0, [r1, #0]
 80041c4:	062e      	lsls	r6, r5, #24
 80041c6:	f100 0304 	add.w	r3, r0, #4
 80041ca:	d50a      	bpl.n	80041e2 <_printf_i+0xce>
 80041cc:	6805      	ldr	r5, [r0, #0]
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	da03      	bge.n	80041dc <_printf_i+0xc8>
 80041d4:	232d      	movs	r3, #45	; 0x2d
 80041d6:	426d      	negs	r5, r5
 80041d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041dc:	485e      	ldr	r0, [pc, #376]	; (8004358 <_printf_i+0x244>)
 80041de:	230a      	movs	r3, #10
 80041e0:	e019      	b.n	8004216 <_printf_i+0x102>
 80041e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041e6:	6805      	ldr	r5, [r0, #0]
 80041e8:	600b      	str	r3, [r1, #0]
 80041ea:	bf18      	it	ne
 80041ec:	b22d      	sxthne	r5, r5
 80041ee:	e7ef      	b.n	80041d0 <_printf_i+0xbc>
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	1d18      	adds	r0, r3, #4
 80041f6:	6008      	str	r0, [r1, #0]
 80041f8:	0628      	lsls	r0, r5, #24
 80041fa:	d501      	bpl.n	8004200 <_printf_i+0xec>
 80041fc:	681d      	ldr	r5, [r3, #0]
 80041fe:	e002      	b.n	8004206 <_printf_i+0xf2>
 8004200:	0669      	lsls	r1, r5, #25
 8004202:	d5fb      	bpl.n	80041fc <_printf_i+0xe8>
 8004204:	881d      	ldrh	r5, [r3, #0]
 8004206:	4854      	ldr	r0, [pc, #336]	; (8004358 <_printf_i+0x244>)
 8004208:	2f6f      	cmp	r7, #111	; 0x6f
 800420a:	bf0c      	ite	eq
 800420c:	2308      	moveq	r3, #8
 800420e:	230a      	movne	r3, #10
 8004210:	2100      	movs	r1, #0
 8004212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004216:	6866      	ldr	r6, [r4, #4]
 8004218:	60a6      	str	r6, [r4, #8]
 800421a:	2e00      	cmp	r6, #0
 800421c:	bfa2      	ittt	ge
 800421e:	6821      	ldrge	r1, [r4, #0]
 8004220:	f021 0104 	bicge.w	r1, r1, #4
 8004224:	6021      	strge	r1, [r4, #0]
 8004226:	b90d      	cbnz	r5, 800422c <_printf_i+0x118>
 8004228:	2e00      	cmp	r6, #0
 800422a:	d04d      	beq.n	80042c8 <_printf_i+0x1b4>
 800422c:	4616      	mov	r6, r2
 800422e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004232:	fb03 5711 	mls	r7, r3, r1, r5
 8004236:	5dc7      	ldrb	r7, [r0, r7]
 8004238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800423c:	462f      	mov	r7, r5
 800423e:	42bb      	cmp	r3, r7
 8004240:	460d      	mov	r5, r1
 8004242:	d9f4      	bls.n	800422e <_printf_i+0x11a>
 8004244:	2b08      	cmp	r3, #8
 8004246:	d10b      	bne.n	8004260 <_printf_i+0x14c>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	07df      	lsls	r7, r3, #31
 800424c:	d508      	bpl.n	8004260 <_printf_i+0x14c>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	4299      	cmp	r1, r3
 8004254:	bfde      	ittt	le
 8004256:	2330      	movle	r3, #48	; 0x30
 8004258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800425c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004260:	1b92      	subs	r2, r2, r6
 8004262:	6122      	str	r2, [r4, #16]
 8004264:	f8cd a000 	str.w	sl, [sp]
 8004268:	464b      	mov	r3, r9
 800426a:	aa03      	add	r2, sp, #12
 800426c:	4621      	mov	r1, r4
 800426e:	4640      	mov	r0, r8
 8004270:	f7ff fee2 	bl	8004038 <_printf_common>
 8004274:	3001      	adds	r0, #1
 8004276:	d14c      	bne.n	8004312 <_printf_i+0x1fe>
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	b004      	add	sp, #16
 800427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004282:	4835      	ldr	r0, [pc, #212]	; (8004358 <_printf_i+0x244>)
 8004284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	680e      	ldr	r6, [r1, #0]
 800428c:	061f      	lsls	r7, r3, #24
 800428e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004292:	600e      	str	r6, [r1, #0]
 8004294:	d514      	bpl.n	80042c0 <_printf_i+0x1ac>
 8004296:	07d9      	lsls	r1, r3, #31
 8004298:	bf44      	itt	mi
 800429a:	f043 0320 	orrmi.w	r3, r3, #32
 800429e:	6023      	strmi	r3, [r4, #0]
 80042a0:	b91d      	cbnz	r5, 80042aa <_printf_i+0x196>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	f023 0320 	bic.w	r3, r3, #32
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	2310      	movs	r3, #16
 80042ac:	e7b0      	b.n	8004210 <_printf_i+0xfc>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f043 0320 	orr.w	r3, r3, #32
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	2378      	movs	r3, #120	; 0x78
 80042b8:	4828      	ldr	r0, [pc, #160]	; (800435c <_printf_i+0x248>)
 80042ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042be:	e7e3      	b.n	8004288 <_printf_i+0x174>
 80042c0:	065e      	lsls	r6, r3, #25
 80042c2:	bf48      	it	mi
 80042c4:	b2ad      	uxthmi	r5, r5
 80042c6:	e7e6      	b.n	8004296 <_printf_i+0x182>
 80042c8:	4616      	mov	r6, r2
 80042ca:	e7bb      	b.n	8004244 <_printf_i+0x130>
 80042cc:	680b      	ldr	r3, [r1, #0]
 80042ce:	6826      	ldr	r6, [r4, #0]
 80042d0:	6960      	ldr	r0, [r4, #20]
 80042d2:	1d1d      	adds	r5, r3, #4
 80042d4:	600d      	str	r5, [r1, #0]
 80042d6:	0635      	lsls	r5, r6, #24
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	d501      	bpl.n	80042e0 <_printf_i+0x1cc>
 80042dc:	6018      	str	r0, [r3, #0]
 80042de:	e002      	b.n	80042e6 <_printf_i+0x1d2>
 80042e0:	0671      	lsls	r1, r6, #25
 80042e2:	d5fb      	bpl.n	80042dc <_printf_i+0x1c8>
 80042e4:	8018      	strh	r0, [r3, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	6123      	str	r3, [r4, #16]
 80042ea:	4616      	mov	r6, r2
 80042ec:	e7ba      	b.n	8004264 <_printf_i+0x150>
 80042ee:	680b      	ldr	r3, [r1, #0]
 80042f0:	1d1a      	adds	r2, r3, #4
 80042f2:	600a      	str	r2, [r1, #0]
 80042f4:	681e      	ldr	r6, [r3, #0]
 80042f6:	6862      	ldr	r2, [r4, #4]
 80042f8:	2100      	movs	r1, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7fb ff68 	bl	80001d0 <memchr>
 8004300:	b108      	cbz	r0, 8004306 <_printf_i+0x1f2>
 8004302:	1b80      	subs	r0, r0, r6
 8004304:	6060      	str	r0, [r4, #4]
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	6123      	str	r3, [r4, #16]
 800430a:	2300      	movs	r3, #0
 800430c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004310:	e7a8      	b.n	8004264 <_printf_i+0x150>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	4632      	mov	r2, r6
 8004316:	4649      	mov	r1, r9
 8004318:	4640      	mov	r0, r8
 800431a:	47d0      	blx	sl
 800431c:	3001      	adds	r0, #1
 800431e:	d0ab      	beq.n	8004278 <_printf_i+0x164>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	079b      	lsls	r3, r3, #30
 8004324:	d413      	bmi.n	800434e <_printf_i+0x23a>
 8004326:	68e0      	ldr	r0, [r4, #12]
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	4298      	cmp	r0, r3
 800432c:	bfb8      	it	lt
 800432e:	4618      	movlt	r0, r3
 8004330:	e7a4      	b.n	800427c <_printf_i+0x168>
 8004332:	2301      	movs	r3, #1
 8004334:	4632      	mov	r2, r6
 8004336:	4649      	mov	r1, r9
 8004338:	4640      	mov	r0, r8
 800433a:	47d0      	blx	sl
 800433c:	3001      	adds	r0, #1
 800433e:	d09b      	beq.n	8004278 <_printf_i+0x164>
 8004340:	3501      	adds	r5, #1
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	9903      	ldr	r1, [sp, #12]
 8004346:	1a5b      	subs	r3, r3, r1
 8004348:	42ab      	cmp	r3, r5
 800434a:	dcf2      	bgt.n	8004332 <_printf_i+0x21e>
 800434c:	e7eb      	b.n	8004326 <_printf_i+0x212>
 800434e:	2500      	movs	r5, #0
 8004350:	f104 0619 	add.w	r6, r4, #25
 8004354:	e7f5      	b.n	8004342 <_printf_i+0x22e>
 8004356:	bf00      	nop
 8004358:	0800461d 	.word	0x0800461d
 800435c:	0800462e 	.word	0x0800462e

08004360 <memcpy>:
 8004360:	440a      	add	r2, r1
 8004362:	4291      	cmp	r1, r2
 8004364:	f100 33ff 	add.w	r3, r0, #4294967295
 8004368:	d100      	bne.n	800436c <memcpy+0xc>
 800436a:	4770      	bx	lr
 800436c:	b510      	push	{r4, lr}
 800436e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004376:	4291      	cmp	r1, r2
 8004378:	d1f9      	bne.n	800436e <memcpy+0xe>
 800437a:	bd10      	pop	{r4, pc}

0800437c <memmove>:
 800437c:	4288      	cmp	r0, r1
 800437e:	b510      	push	{r4, lr}
 8004380:	eb01 0402 	add.w	r4, r1, r2
 8004384:	d902      	bls.n	800438c <memmove+0x10>
 8004386:	4284      	cmp	r4, r0
 8004388:	4623      	mov	r3, r4
 800438a:	d807      	bhi.n	800439c <memmove+0x20>
 800438c:	1e43      	subs	r3, r0, #1
 800438e:	42a1      	cmp	r1, r4
 8004390:	d008      	beq.n	80043a4 <memmove+0x28>
 8004392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800439a:	e7f8      	b.n	800438e <memmove+0x12>
 800439c:	4402      	add	r2, r0
 800439e:	4601      	mov	r1, r0
 80043a0:	428a      	cmp	r2, r1
 80043a2:	d100      	bne.n	80043a6 <memmove+0x2a>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ae:	e7f7      	b.n	80043a0 <memmove+0x24>

080043b0 <_free_r>:
 80043b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d048      	beq.n	8004448 <_free_r+0x98>
 80043b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ba:	9001      	str	r0, [sp, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f1a1 0404 	sub.w	r4, r1, #4
 80043c2:	bfb8      	it	lt
 80043c4:	18e4      	addlt	r4, r4, r3
 80043c6:	f000 f8d3 	bl	8004570 <__malloc_lock>
 80043ca:	4a20      	ldr	r2, [pc, #128]	; (800444c <_free_r+0x9c>)
 80043cc:	9801      	ldr	r0, [sp, #4]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	4615      	mov	r5, r2
 80043d2:	b933      	cbnz	r3, 80043e2 <_free_r+0x32>
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6014      	str	r4, [r2, #0]
 80043d8:	b003      	add	sp, #12
 80043da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043de:	f000 b8cd 	b.w	800457c <__malloc_unlock>
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	d90b      	bls.n	80043fe <_free_r+0x4e>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	1862      	adds	r2, r4, r1
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bf04      	itt	eq
 80043ee:	681a      	ldreq	r2, [r3, #0]
 80043f0:	685b      	ldreq	r3, [r3, #4]
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	bf04      	itt	eq
 80043f6:	1852      	addeq	r2, r2, r1
 80043f8:	6022      	streq	r2, [r4, #0]
 80043fa:	602c      	str	r4, [r5, #0]
 80043fc:	e7ec      	b.n	80043d8 <_free_r+0x28>
 80043fe:	461a      	mov	r2, r3
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b10b      	cbz	r3, 8004408 <_free_r+0x58>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d9fa      	bls.n	80043fe <_free_r+0x4e>
 8004408:	6811      	ldr	r1, [r2, #0]
 800440a:	1855      	adds	r5, r2, r1
 800440c:	42a5      	cmp	r5, r4
 800440e:	d10b      	bne.n	8004428 <_free_r+0x78>
 8004410:	6824      	ldr	r4, [r4, #0]
 8004412:	4421      	add	r1, r4
 8004414:	1854      	adds	r4, r2, r1
 8004416:	42a3      	cmp	r3, r4
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	d1dd      	bne.n	80043d8 <_free_r+0x28>
 800441c:	681c      	ldr	r4, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6053      	str	r3, [r2, #4]
 8004422:	4421      	add	r1, r4
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	e7d7      	b.n	80043d8 <_free_r+0x28>
 8004428:	d902      	bls.n	8004430 <_free_r+0x80>
 800442a:	230c      	movs	r3, #12
 800442c:	6003      	str	r3, [r0, #0]
 800442e:	e7d3      	b.n	80043d8 <_free_r+0x28>
 8004430:	6825      	ldr	r5, [r4, #0]
 8004432:	1961      	adds	r1, r4, r5
 8004434:	428b      	cmp	r3, r1
 8004436:	bf04      	itt	eq
 8004438:	6819      	ldreq	r1, [r3, #0]
 800443a:	685b      	ldreq	r3, [r3, #4]
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	bf04      	itt	eq
 8004440:	1949      	addeq	r1, r1, r5
 8004442:	6021      	streq	r1, [r4, #0]
 8004444:	6054      	str	r4, [r2, #4]
 8004446:	e7c7      	b.n	80043d8 <_free_r+0x28>
 8004448:	b003      	add	sp, #12
 800444a:	bd30      	pop	{r4, r5, pc}
 800444c:	200000bc 	.word	0x200000bc

08004450 <_malloc_r>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	1ccd      	adds	r5, r1, #3
 8004454:	f025 0503 	bic.w	r5, r5, #3
 8004458:	3508      	adds	r5, #8
 800445a:	2d0c      	cmp	r5, #12
 800445c:	bf38      	it	cc
 800445e:	250c      	movcc	r5, #12
 8004460:	2d00      	cmp	r5, #0
 8004462:	4606      	mov	r6, r0
 8004464:	db01      	blt.n	800446a <_malloc_r+0x1a>
 8004466:	42a9      	cmp	r1, r5
 8004468:	d903      	bls.n	8004472 <_malloc_r+0x22>
 800446a:	230c      	movs	r3, #12
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	2000      	movs	r0, #0
 8004470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004472:	f000 f87d 	bl	8004570 <__malloc_lock>
 8004476:	4921      	ldr	r1, [pc, #132]	; (80044fc <_malloc_r+0xac>)
 8004478:	680a      	ldr	r2, [r1, #0]
 800447a:	4614      	mov	r4, r2
 800447c:	b99c      	cbnz	r4, 80044a6 <_malloc_r+0x56>
 800447e:	4f20      	ldr	r7, [pc, #128]	; (8004500 <_malloc_r+0xb0>)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b923      	cbnz	r3, 800448e <_malloc_r+0x3e>
 8004484:	4621      	mov	r1, r4
 8004486:	4630      	mov	r0, r6
 8004488:	f000 f862 	bl	8004550 <_sbrk_r>
 800448c:	6038      	str	r0, [r7, #0]
 800448e:	4629      	mov	r1, r5
 8004490:	4630      	mov	r0, r6
 8004492:	f000 f85d 	bl	8004550 <_sbrk_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d123      	bne.n	80044e2 <_malloc_r+0x92>
 800449a:	230c      	movs	r3, #12
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 f86c 	bl	800457c <__malloc_unlock>
 80044a4:	e7e3      	b.n	800446e <_malloc_r+0x1e>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	1b5b      	subs	r3, r3, r5
 80044aa:	d417      	bmi.n	80044dc <_malloc_r+0x8c>
 80044ac:	2b0b      	cmp	r3, #11
 80044ae:	d903      	bls.n	80044b8 <_malloc_r+0x68>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	441c      	add	r4, r3
 80044b4:	6025      	str	r5, [r4, #0]
 80044b6:	e004      	b.n	80044c2 <_malloc_r+0x72>
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	42a2      	cmp	r2, r4
 80044bc:	bf0c      	ite	eq
 80044be:	600b      	streq	r3, [r1, #0]
 80044c0:	6053      	strne	r3, [r2, #4]
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 f85a 	bl	800457c <__malloc_unlock>
 80044c8:	f104 000b 	add.w	r0, r4, #11
 80044cc:	1d23      	adds	r3, r4, #4
 80044ce:	f020 0007 	bic.w	r0, r0, #7
 80044d2:	1ac2      	subs	r2, r0, r3
 80044d4:	d0cc      	beq.n	8004470 <_malloc_r+0x20>
 80044d6:	1a1b      	subs	r3, r3, r0
 80044d8:	50a3      	str	r3, [r4, r2]
 80044da:	e7c9      	b.n	8004470 <_malloc_r+0x20>
 80044dc:	4622      	mov	r2, r4
 80044de:	6864      	ldr	r4, [r4, #4]
 80044e0:	e7cc      	b.n	800447c <_malloc_r+0x2c>
 80044e2:	1cc4      	adds	r4, r0, #3
 80044e4:	f024 0403 	bic.w	r4, r4, #3
 80044e8:	42a0      	cmp	r0, r4
 80044ea:	d0e3      	beq.n	80044b4 <_malloc_r+0x64>
 80044ec:	1a21      	subs	r1, r4, r0
 80044ee:	4630      	mov	r0, r6
 80044f0:	f000 f82e 	bl	8004550 <_sbrk_r>
 80044f4:	3001      	adds	r0, #1
 80044f6:	d1dd      	bne.n	80044b4 <_malloc_r+0x64>
 80044f8:	e7cf      	b.n	800449a <_malloc_r+0x4a>
 80044fa:	bf00      	nop
 80044fc:	200000bc 	.word	0x200000bc
 8004500:	200000c0 	.word	0x200000c0

08004504 <_realloc_r>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	4607      	mov	r7, r0
 8004508:	4614      	mov	r4, r2
 800450a:	460e      	mov	r6, r1
 800450c:	b921      	cbnz	r1, 8004518 <_realloc_r+0x14>
 800450e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004512:	4611      	mov	r1, r2
 8004514:	f7ff bf9c 	b.w	8004450 <_malloc_r>
 8004518:	b922      	cbnz	r2, 8004524 <_realloc_r+0x20>
 800451a:	f7ff ff49 	bl	80043b0 <_free_r>
 800451e:	4625      	mov	r5, r4
 8004520:	4628      	mov	r0, r5
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	f000 f830 	bl	8004588 <_malloc_usable_size_r>
 8004528:	42a0      	cmp	r0, r4
 800452a:	d20f      	bcs.n	800454c <_realloc_r+0x48>
 800452c:	4621      	mov	r1, r4
 800452e:	4638      	mov	r0, r7
 8004530:	f7ff ff8e 	bl	8004450 <_malloc_r>
 8004534:	4605      	mov	r5, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d0f2      	beq.n	8004520 <_realloc_r+0x1c>
 800453a:	4631      	mov	r1, r6
 800453c:	4622      	mov	r2, r4
 800453e:	f7ff ff0f 	bl	8004360 <memcpy>
 8004542:	4631      	mov	r1, r6
 8004544:	4638      	mov	r0, r7
 8004546:	f7ff ff33 	bl	80043b0 <_free_r>
 800454a:	e7e9      	b.n	8004520 <_realloc_r+0x1c>
 800454c:	4635      	mov	r5, r6
 800454e:	e7e7      	b.n	8004520 <_realloc_r+0x1c>

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4d06      	ldr	r5, [pc, #24]	; (800456c <_sbrk_r+0x1c>)
 8004554:	2300      	movs	r3, #0
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fc faa2 	bl	8000aa4 <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000198 	.word	0x20000198

08004570 <__malloc_lock>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__malloc_lock+0x8>)
 8004572:	f000 b811 	b.w	8004598 <__retarget_lock_acquire_recursive>
 8004576:	bf00      	nop
 8004578:	200001a0 	.word	0x200001a0

0800457c <__malloc_unlock>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__malloc_unlock+0x8>)
 800457e:	f000 b80c 	b.w	800459a <__retarget_lock_release_recursive>
 8004582:	bf00      	nop
 8004584:	200001a0 	.word	0x200001a0

08004588 <_malloc_usable_size_r>:
 8004588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800458c:	1f18      	subs	r0, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfbc      	itt	lt
 8004592:	580b      	ldrlt	r3, [r1, r0]
 8004594:	18c0      	addlt	r0, r0, r3
 8004596:	4770      	bx	lr

08004598 <__retarget_lock_acquire_recursive>:
 8004598:	4770      	bx	lr

0800459a <__retarget_lock_release_recursive>:
 800459a:	4770      	bx	lr

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr
